% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AClass_230815_2.R
\name{nano.train.report}
\alias{nano.train.report}
\title{Model training performance summary}
\usage{
nano.train.report(
  prefix,
  training_model_obj,
  feature_min,
  feature_max,
  print_report = TRUE,
  out_path = NULL,
  feature_box_range = NULL,
  annotate_alg = FALSE,
  adj_y_range = NULL,
  add_legend = FALSE
)
}
\arguments{
\item{prefix}{\itemize{
\item file prefix that goes to algorithms performance report
}}

\item{training_model_obj}{\itemize{
\item training model object where training performance is pulled out from
}}

\item{feature_min}{\itemize{
\item controls the number of min plotting range (x-axis). Should lie within trained range.
}}

\item{feature_max}{\itemize{
\item controls the number of max plotting range (x-axis). Should lie within trained range.
}}

\item{print_report}{\itemize{
\item binary option to print as pdf or not
}}

\item{out_path}{output path. When not provided out_path will be extracted from run_info (default)}

\item{feature_box_range}{\itemize{
\item controls plotting box over selected feature range in overall combined plot. Expects 4 numeric values: xmin, xmax, ymin, ymax in the format: c(x1,x2,y1,y2). Default. NULL.
}}

\item{annotate_alg}{\itemize{
\item whether to annotate algorithms when in overall combined plot. Default NULL.
}}

\item{adj_y_range}{\itemize{
\item controls y-axis in overall combined plot. Format: c(y_min,y_max).
}}

\item{add_legend}{\itemize{
\item binary option to add legend to overall combined plot. Default FALSE.
}}
}
\value{
A ggplot object showing overall accuracy trends by number of features and algorithm.
}
\description{
Generates summary statistics and visualizations of classification accuracy across algorithms and feature subset sizes from \code{nano.train()} output.
Produces line plots, heatmaps, and optional PDF reports to assist in evaluating the effect of probe number and model choice on training performance.

Designed to facilitate selection of optimal classifiers and feature sizes by visualizing average accuracy trends and algorithm-specific behaviors.
}
\examples{
nano.train.report(prefix = "demo", training_model_obj = training_models, feature_min = 20, feature_max = 30)
}
